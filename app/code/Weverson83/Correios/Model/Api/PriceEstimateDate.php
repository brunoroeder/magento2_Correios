<?php
namespace Weverson83\Correios\Model\Api;

use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Quote\Model\Quote\Address\RateRequest;
use Magento\Sales\Model\Order\Shipment;
use Weverson83\Correios\Model\Config\Path as ConfigPath;

/**
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @author    Weverson Cachinsky <weversoncachinsky@gmail.com>
 */
class PriceEstimateDate
{
    const DATE_FORMAT = 'd/m/Y';
    const DEFAULT_WIDTH = 11;
    const DEFAULT_HEIGHT = 2;
    const DEFAULT_DEPTH = 16;
    const DEFAULT_DIAMETER = 20;
    const DEFAULT_PACKAGE_TYPE = 1;
    const DEFAULT_GATEWAY_URL = 'http://ws.correios.com.br/calculador/CalcPrecoPrazo.asmx';


    private $methodUri = 'CalcPrecoPrazoData';
    /**
     * @var RateRequest
     */
    private $request;
    /**
     * @var ScopeConfigInterface
     */
    private $scopeConfig;

    public function __construct(RateRequest $request, ScopeConfigInterface $scopeConfig)
    {
        $this->request = $request;
        $this->scopeConfig = $scopeConfig;
    }

    public function getParams()
    {
        return [
            'nCdEmpresa' => $this->getConfigValue(' ', ConfigPath::USERNAME),
            'sDsSenha' => $this->getConfigValue(' ', ConfigPath::PASSWORD),
            'nCdServico' => $this->getConfigValue('', ConfigPath::ALLOWED_METHODS),
            'sCepOrigem' => $this->getOriginPostcode(),
            'sCepDestino' => $this->cleanPostcode($this->request->getDestPostcode()),
            'nVlPeso' => $this->request->getPackageWeight(),
            'nVlLargura' => self::DEFAULT_WIDTH,
            'nCdFormato' => $this->getConfigValue(self::DEFAULT_PACKAGE_TYPE, ConfigPath::PACKAGE_TYPE),
            'nVlComprimento' => self::DEFAULT_DEPTH,
            'nVlAltura' =>  self::DEFAULT_HEIGHT,
            'nVlDiametro' => self::DEFAULT_DIAMETER,
            'sCdMaoPropria' => 'N',
            'nVlValorDeclarado' => $this->getDeclaredValue(),
            'sCdAvisoRecebimento' => $this->getNotifyDeliveryFlag(),
            'sDtCalculo' => (new \DateTime('now'))->format(self::DATE_FORMAT),
        ];
    }

    public function getMethodUri()
    {
        $webServiceUri = $this->getConfigValue(self::DEFAULT_GATEWAY_URL, ConfigPath::GATEWAY_URL);
        return "$webServiceUri/{$this->methodUri}";
    }

    private function getOriginPostcode()
    {
        return $this->cleanPostcode(
            $this->getConfigValue($this->request->getOrigPostcode(), Shipment::XML_PATH_STORE_ZIP)
        );
    }

    protected function getConfigValue($defaultValue, $configPath)
    {
        if (!strlen($defaultValue)) {
            $defaultValue = $this->scopeConfig->getValue(
                $configPath,
                \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
                $this->request->getStoreId()
            );
        }

        if (!strlen($defaultValue)) {
            throw new \Exception('Invalid Path: ' . $configPath);
        }

        return $defaultValue;
    }

    private function cleanPostcode($postcode)
    {
        return str_replace(['-', ' '], '', $postcode);
    }

    private function getNotifyDeliveryFlag()
    {
        if ($this->getConfigValue('', ConfigPath::NOTIFY_DELIVERY)) {
            return 'S';
        }

        return 'N';
    }

    private function getDeclaredValue()
    {
        if (!$this->getConfigValue('', ConfigPath::USE_DECLARED_VALUE)) {
            return 0;
        }

        return array_reduce($this->request->getAllItems(), function ($totalPrice, $item){
            $totalPrice += $item->getRowTotal();

            return $totalPrice;
        }, 0);
    }
}
