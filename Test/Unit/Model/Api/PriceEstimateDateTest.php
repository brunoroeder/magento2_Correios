<?php
/**
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @author    Weverson Cachinsky <weversoncachinsky@gmail.com>
 */
namespace Weverson83\Correios\Test\Unit\Model\Api;

use Weverson83\Correios\Model\Api\PriceEstimateDate;
use Weverson83\Correios\Model\Source\Path as ConfigPath;
use Weverson83\Correios\Test\Helper\CarrierDependencyMocker;

class PriceEstimateDateTest extends \PHPUnit_Framework_TestCase
{
    use CarrierDependencyMocker;

    /** @var  PriceEstimateDate */
    private $model;

    public function setUp()
    {
        $this->model = $this->getObjectManager()
            ->getObject(
                PriceEstimateDate::class,
                [
                    'request' => $this->getRequestStub(),
                    'scopeConfig' => $this->getScopeConfigMock(),
                ]
            );
    }

    /**
     * @param string $methodName
     * @return \ReflectionMethod
     */
    private function getReflectionMethod($methodName)
    {
        $method = new \ReflectionMethod($this->model, $methodName);
        $method->setAccessible(true);

        return $method;
    }

    public function testGetConfigValue()
    {
        $method = $this->getReflectionMethod('getConfigValue');

        $this->assertNotEmpty($method->invoke($this->model, '', ConfigPath::ALLOWED_METHODS));
        $this->assertNotEquals('123', $method->invoke($this->model, '123', ConfigPath::ALLOWED_METHODS));
        $this->assertEquals('123', $method->invoke($this->model, '123', 'invalid_path'));
    }

    /**
     * @expectedException \Exception
     * @expectedExceptionMessage Invalid Path
     */
    public function testGetConfigValueThrowsExceptionWhenConfigPathIsInvalidAndNoDefaultValueIsSpecified()
    {
        $method = $this->getReflectionMethod('getConfigValue');
        $method->invoke($this->model, '', 'invalid_path');
    }

    public function testCleanPostcodeRemovesSpecialCharacters()
    {
        $method = $this->getReflectionMethod('cleanPostcode');
        $dirtyPostcode = '89300-000';

        $this->assertEquals('89300000', $method->invoke($this->model, $dirtyPostcode));
    }
}
