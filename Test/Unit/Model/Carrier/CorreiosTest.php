<?php
namespace Weverson83\Correios\Test\Unit\Model\Carrier;

use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\HTTP\ZendClientFactory;
use Magento\Quote\Model\Quote\Address\RateRequest;
use Magento\Quote\Model\Quote\Address\RateResult\ErrorFactory;
use Magento\Quote\Model\Quote\Address\RateResult\MethodFactory;
use Magento\Shipping\Model\Rate\ResultFactory;
use Magento\Shipping\Model\Simplexml\ElementFactory;
use Magento\TestFramework\ObjectManager;
use Weverson83\Correios\Model\Api\PriceEstimateDate;
use Weverson83\Correios\Model\Api\PriceEstimateDateFactory;
use Weverson83\Correios\Model\Carrier\Correios;
use Weverson83\Correios\Model\Source\MethodList;
use Weverson83\Correios\Test\Helper\CarrierDependencyMocker;

/**
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @author    Weverson Cachinsky <weversoncachinsky@gmail.com>
 */
class CorreiosTest extends \PHPUnit_Framework_TestCase
{
    use CarrierDependencyMocker;

    /** @var ScopeConfigInterface */
    private $scopeConfig;

    /** @var ZendClientFactory */
    private $httpClientFactory;

    /** @var ElementFactory */
    private $xmlElFactory;

    /** @var ResultFactory */
    private $rateFactory;

    /** @var ErrorFactory */
    private $errorFactory;

    /** @var MethodFactory */
    private $rateMethodFactory;

    /** @var Correios */
    private $carrier;

    public function setUp()
    {
        $this->scopeConfig = $this->getScopeConfigMock();
        $this->httpClientFactory = $this->getHttpClientFactoryMock();
        $this->xmlElFactory = $this->getXmlElementFactoryMock();
        $this->rateFactory = $this->getRateFactoryMock();
        $this->errorFactory = $this->getErrorFactoryMock();
        $this->rateMethodFactory = $this->getRateMethodFactoryMock();

        $rateRequestMock = $this->getMockBuilder(RateRequest::class)
            ->disableOriginalConstructor()
            ->setMethods(['getAllItems'])
            ->getMock();
        $rateRequestMock->method('getAllItems')->will($this->returnValue([]));

        $priceEstimateDate = $this->getObjectManager()
            ->getObject(
                PriceEstimateDate::class,
                [
                    'rateRequest' => $rateRequestMock,
                    'scopeConfig' => $this->scopeConfig,
                ]
            );

        $methodListMock = $this->getMockBuilder(MethodList::class)
            ->disableOriginalConstructor()
            ->setMethods(['toOptionArray'])
            ->getMock();

        $methodListMock->method('toOptionArray')->will($this->returnValue([
            ['value' => '40010', 'label' => 'Test']
        ]));


        /** @var Correios $carrier */
        $this->carrier = $this->getObjectManager()->getObject(
            Correios::class,
            [
                'scopeConfig' => $this->scopeConfig,
                'httpClientFactory'=> $this->httpClientFactory,
                'xmlElFactory' => $this->xmlElFactory,
                'xmlSecurity' => new \Magento\Framework\Xml\Security(),
                'rateFactory' => $this->rateFactory,
                'rateErrorFactory' => $this->errorFactory,
                'rateMethodFactory' => $this->rateMethodFactory,
                'priceEstimateDate' => $priceEstimateDate,
                'methodList' => $methodListMock,
            ]
        );
    }

    public function testCollectRates()
    {
        $this->scopeConfig->expects($this->once())->method('isSetFlag')->willReturn(true);

        $this->httpResponse->method('getBody')->will(
            $this->returnValue(file_get_contents(__DIR__ . '/../_files/response_success.xml'))
        );

        $this->assertNotEmpty($this->carrier->collectRates($this->getRequestStub())->getAllRates());
    }

    public function testCollectRatesErrorMessage()
    {
        $this->scopeConfig->expects($this->once())->method('isSetFlag')->willReturn(false);

        $this->error->expects($this->once())->method('setCarrier')->with('correios');
        $this->error->expects($this->once())->method('setCarrierTitle');
        $this->error->expects($this->once())->method('setErrorMessage');

        $request = new RateRequest();
        $request->setPackageWeight(1);

        $result = $this->carrier->collectRates($request);
        $this->assertSame($this->error, $result);
    }

    public function testCollectRatesFail()
    {
        $this->scopeConfig->expects($this->once())->method('isSetFlag')->willReturn(true);

        $this->httpResponse->method('getBody')->will(
            $this->returnValue(file_get_contents(__DIR__ . '/../_files/response_fail.xml'))
        );

        $this->assertFalse(false, $this->carrier->collectRates($this->getRequestStub()));
    }
}
