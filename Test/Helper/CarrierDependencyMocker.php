<?php
namespace Weverson83\Correios\Test\Helper;

use Magento\Framework\App\Config\ScopeConfigInterface as ScopeConfigInterface;
use Magento\Framework\HTTP\ZendClient;
use Magento\Framework\HTTP\ZendClientFactory as ZendClientFactory;
use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
use Magento\Quote\Model\Quote\Address\RateRequest;
use Magento\Quote\Model\Quote\Address\RateResult\Method;
use Magento\Quote\Model\Quote\Address\RateResult\MethodFactory;
use Magento\Shipping\Model\Rate\Result;
use Magento\Shipping\Model\Rate\ResultFactory;
use Magento\Shipping\Model\Simplexml\ElementFactory as ShippingXmlElFactory;
use Magento\Shipping\Model\Simplexml\Element as ShippingXmlEl;

/**
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @author    Weverson Cachinsky <weversoncachinsky@gmail.com>
 */
trait CarrierDependencyMocker
{
    /** @var  ObjectManager */
    protected $objectManager;

    protected $httpResponse;

    protected $error;

    public function getScopeConfigMock()
    {
        $scopeConfig = $this->getMockBuilder(ScopeConfigInterface::class)
            ->disableOriginalConstructor()
            ->getMock();

        $scopeConfig->method('getValue')
            ->will($this->returnCallback([$this, 'scopeConfigGetValue']));

        return $scopeConfig;
    }

    public function getHttpClientFactoryMock()
    {
        $this->httpResponse = $this->getMockBuilder(\Zend_Http_Response::class)
            ->disableOriginalConstructor()
            ->setMethods(['getBody'])
            ->getMock();

        $httpClient = $this->getMockBuilder(ZendClient::class)
            ->disableOriginalConstructor()
            ->setMethods(['request'])
            ->getMock();

        $httpClient->method('request')->will($this->returnValue($this->httpResponse));

        $httpClientFactory = $this->getMockBuilder(ZendClientFactory::class)
            ->disableOriginalConstructor()
            ->setMethods(['create'])
            ->getMock();

        $httpClientFactory->method('create')->will($this->returnValue($httpClient));

        return $httpClientFactory;
    }

    public function getXmlElementFactoryMock()
    {
        $xmlElFactory = $this->getMockBuilder(ShippingXmlElFactory::class)
            ->disableOriginalConstructor()
            ->setMethods(['create'])
            ->getMock();

        $xmlElFactory->method('create')->will(
            $this->returnCallback(
                function ($data) {
                    return $this->getObjectManager()->getObject(ShippingXmlEl::class, ['data' => $data['data']]);
                }
            )
        );

        return $xmlElFactory;
    }

    public function getRateFactoryMock()
    {
        $rateFactory = $this->getMockBuilder(ResultFactory::class)
            ->disableOriginalConstructor()
            ->setMethods(['create'])
            ->getMock();

        $rateResult = $this->getMockBuilder(Result::class)
            ->setMethods(null)
            ->disableOriginalConstructor()
            ->getMock();

        $rateFactory->method('create')->will($this->returnValue($rateResult));

        return $rateFactory;
    }

    public function getRateMethodFactoryMock()
    {
        $rateMethodFactory = $this->getMockBuilder(MethodFactory::class)
            ->disableOriginalConstructor()
            ->setMethods(['create'])
            ->getMock();

        $rateMethod = $this->getMockBuilder(Method::class)
            ->disableOriginalConstructor()
            ->setMethods(['setPrice'])
            ->getMock();

        $rateMethod->method('setPrice')->will($this->returnCallback(
            function ($price) use ($rateMethod) {
                $rateMethod->setData('price', $price);
                return $rateMethod;
            }
        ));

        $rateMethodFactory->method('create')->will($this->returnValue($rateMethod));

        return $rateMethodFactory;
    }

    public function getErrorFactoryMock()
    {
        $this->error = $this->getMockBuilder('\Magento\Quote\Model\Quote\Address\RateResult\Error')
            ->setMethods(['setCarrier', 'setCarrierTitle', 'setErrorMessage'])
            ->getMock();

        $errorFactory = $this->getMockBuilder('Magento\Quote\Model\Quote\Address\RateResult\ErrorFactory')
            ->disableOriginalConstructor()
            ->setMethods(['create'])
            ->getMock();

        $errorFactory->method('create')->willReturn($this->error);

        return $errorFactory;
    }

    protected function getObjectManager()
    {
        if (!$this->objectManager) {
            $this->objectManager = new ObjectManager($this);
        }

        return $this->objectManager;
    }

    public function scopeConfigGetValue($path)
    {
        $pathMap = require __DIR__ . '/../Unit/Model/_files/scope_config_values.php';

        return isset($pathMap[$path]) ? $pathMap[$path] : null;
    }

    /**
     * @return RateRequest
     */
    protected function getRequestStub()
    {
        return $this->getObjectManager()->getObject(
            RateRequest::class, require __DIR__ . '/../Unit/Model/_files/rates_request_data_correios.php'
        );
    }
}